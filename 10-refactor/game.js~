var sprites = {
    ship: { sx: 0, sy: 0, w: 37, h: 42, frames: 1 },
    missile: { sx: 0, sy: 30, w: 2, h: 10, frames: 1 },
    enemy_purple: { sx: 37, sy: 0, w: 42, h: 43, frames: 1 },
    explosion: { sx: 0, sy: 64, w: 64, h: 64, frames: 12 }
};

var enemies = {
    basic: { x: 100, y: -50, sprite: 'enemy_purple', B: 100, C: 2 , E: 100 }
};

var startGame = function() {
    Game.setBoard(0,new Starfield(20,0.4,100,true))
    Game.setBoard(1,new Starfield(50,0.6,100))
    Game.setBoard(2,new Starfield(100,1.0,50));
    Game.setBoard(3,new TitleScreen("Alien Invasion", 
                                    "Press fire to start playing",
                                    playGame));
}

var playGame = function() {
    var board = new GameBoard();

    board.add(new Enemy(enemies.basic));
    board.add(new Enemy(enemies.basic, { x: 200 }));
    board.add(new PlayerShip());
    Game.setBoard(3,board);
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Estrellas//

var Starfield = function(speed,opacity,numStars,clear) {

    var stars = $('<canvas/>')
				.attr('width', Game.width)
				.attr('height', Game.height)[0];

    var starCtx = stars.getContext("2d");
    var offset = 0;

    if(clear) {
		starCtx.fillStyle = "#000";
		starCtx.fillRect(0,0,stars.width,stars.height);
    }

    starCtx.fillStyle = "#FFF";
    starCtx.globalAlpha = opacity;
    for(var i=0;i<numStars;i++) {
		starCtx.fillRect( Math.floor(Math.random()*stars.width),
								Math.floor(Math.random()*stars.height),
			 					2,
			 					2);
    }

    this.draw = function(ctx) {
		var intOffset = Math.floor(offset);
		var remaining = stars.height - intOffset;

		if(intOffset > 0) {
	    ctx.drawImage(stars,
					0, remaining,
					stars.width, intOffset,
					0, 0,
					stars.width, intOffset);
		}

		if(remaining > 0) {
	    ctx.drawImage(stars,
					0, 0,
			 	 	stars.width, remaining,
			 	 	0, intOffset,
					stars.width, remaining);
		}
    }

   this.step = function(dt) {
		offset += dt * speed;
		offset = offset % stars.height;
   }
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Nave//

var PlayerShip = function() { 
   
	this.setup('ship', { vx: 0, reloadTime: 0.25, maxVel: 200 });
   
   this.x = Game.width/2 - this.w / 2;
   this.y = Game.height - 10 - this.h;  
   this.reload = this.reloadTime;

   this.step = function(dt) {
		if(Game.keys['left']) { this.vx = -this.maxVel; }
		else if(Game.keys['right']) { this.vx = this.maxVel; }
		else { this.vx = 0; }

		this.x += this.vx * dt;

		if(this.x < 0) { this.x = 0; }
		else if(this.x > Game.width - this.w) { 
			 this.x = Game.width - this.w 
		}

		this.reload-=dt;
		if(Game.keys['fire'] && this.reload < 0) {
			Game.keys['fire'] = false;
			this.reload = this.reloadTime;
			this.board.add(new PlayerMissile(this.x,this.y+this.h/2));
			this.board.add(new PlayerMissile(this.x+this.w,this.y+this.h/2));
		}
		
		if(Game.keys['n'] && this.reload < 0) {
	    	Game.keys['n'] = false;
	    	this.reload = this.reloadTime;
	    	this.board.add(new PlayerFireN(this.x+this.w,this.y+this.h/2));
		}

		if(Game.keys['b'] && this.reload < 0) {
	    	Game.keys['b'] = false;
	    	this.reload = this.reloadTime;
	    	this.board.add(new PlayerFireB(this.x+this.w,this.y+this.h/2));
		}
   }

   this.draw = function(ctx) {
		SpriteSheet.draw(ctx,'ship',this.x,this.y,0);
   }
}

// Heredamos del prototipo new Sprite()
PlayerShip.prototype = new Sprite();



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Arsenal//

var PlayerMissile = function(x,y) {

    this.setup('missile',{ vy: -700 });
    this.x = x - this.w/2; 
    this.y = y - this.h; 
};

PlayerMissile.prototype.step = function(dt)  {
    this.y += this.vy * dt;
    if(this.y < -this.h) { this.board.remove(this); }
};

PlayerMissile.prototype.draw = function(ctx)  {
    SpriteSheet.draw(ctx,'missile',this.x,this.y);
};

PlayerMissile.prototype = new Sprite();

var PlayerFireN = function(x,y) {
    this.w = SpriteSheet.map['explosion'].w;
    this.h = SpriteSheet.map['explosion'].h;
    this.x = x - this.w/2; 

    this.y = y - this.h; 
    this.vy = -1100;
    this.vx = -150;
};

PlayerFireN.prototype.step = function(dt)  {
    this.x += this.vx * -dt;
    this.y += this.vy * dt;
    this.vy=this.vy+100;
    if(this.y < -this.h) { this.board.remove(this); }
    if(this.x < -this.w) { this.board.remove(this); }
};

PlayerFireN.prototype.draw = function(ctx)  {
    SpriteSheet.draw(ctx,'explosion',this.x,this.y);
};

var PlayerFireB = function(x,y) {
    this.w = SpriteSheet.map['explosion'].w;
    this.h = SpriteSheet.map['explosion'].h;
    this.x = x - this.w; 

    this.y = y - this.h; 
    this.vy = -1100;
    this.vx = -150;
};

PlayerFireB.prototype.step = function(dt)  {
    this.x += this.vx * dt;
    this.y += this.vy * dt;
    this.vy=this.vy+100;
    if(this.y < -this.h) { this.board.remove(this); }
    if(this.x < -this.w) { this.board.remove(this); }
};

PlayerFireB.prototype.draw = function(ctx)  {
    SpriteSheet.draw(ctx,'explosion',this.x,this.y);
};



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Enemigos//

var Enemy = function(blueprint,override) {

    var baseParameters =  { A: 0, B: 0, C: 0, D: 0, 
                            E: 0, F: 0, G: 0, H: 0 }

    for (var prop in baseParameters) {
		this[prop] = baseParameters[prop];
    }

    for (prop in blueprint) {
		this[prop] = blueprint[prop];
    }

    if(override) {
		for (prop in override) {
	    this[prop] = override[prop];
		}
    }
    this.w = SpriteSheet.map[this.sprite].w;
    this.h = SpriteSheet.map[this.sprite].h;
    this.t = 0;
}

Enemy.prototype.step = function(dt) {
    this.t += dt;
    this.vx = this.A + this.B * Math.sin(this.C * this.t + this.D);
    this.vy = this.E + this.F * Math.sin(this.G * this.t + this.H);

    this.x += this.vx * dt;
    this.y += this.vy * dt;

    if(this.y > Game.height ||
       this.x < -this.w||
       this.x > Game.width) {
		 this.board.remove(this);
    }
}

Enemy.prototype.draw = function(ctx) {
    SpriteSheet.draw(ctx,this.sprite,this.x,this.y);
}



$(function() {
    Game.initialize("game",sprites,startGame);
});

